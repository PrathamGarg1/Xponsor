// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  userType  String // "brand" or "influencer"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  influencerProfile InfluencerProfile?
  brandProfile      BrandProfile?
  sentMessages      Message[]          @relation("SentMessages")
  receivedMessages  Message[]          @relation("ReceivedMessages")
  campaigns         Campaign[]
}

model InfluencerProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  followerCount   Int
  pricePerReel    Float?
  pricePerStory   Float?
  pricePerPost    Float?
  niche           String?
  instagramHandle String?
  publicLink      String   @unique
  allowMessages   Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model BrandProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName String?
  industry    String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Campaign {
  id                  String   @id @default(cuid())
  title               String
  description         String
  minimumFollowers    Int
  minimumPayout       Float
  allowDirectMessages Boolean  @default(true)
  brandId             String
  brand               User     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}
